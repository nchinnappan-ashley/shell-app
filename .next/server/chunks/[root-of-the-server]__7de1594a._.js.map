{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/NChinnappan/SourceAI/UI/shell-app/src/lib/rag/store.ts"],"sourcesContent":["export type StoredChunk = { id: string; url: string; title?: string; text: string };\n\n// Sparse BM25/TF-IDF store (no external dependencies)\n\ntype SparseDoc = {\n  id: string;\n  url: string;\n  title?: string;\n  text: string;\n  length: number; // token count\n};\n\ntype Store = {\n  docs: Map<string, SparseDoc>;\n  // inverted index: term -> map(docId -> term frequency in doc)\n  inv: Map<string, Map<string, number>>;\n  // document frequencies: term -> number of docs containing term\n  df: Map<string, number>;\n  // total docs and average doc length\n  N: number;\n  avgdl: number;\n};\n\n// Global in-memory store (persists for server process lifetime)\nconst g = globalThis as unknown as { __RAG_SPARSE_STORE?: Store };\nif (!g.__RAG_SPARSE_STORE) {\n  g.__RAG_SPARSE_STORE = { docs: new Map(), inv: new Map(), df: new Map(), N: 0, avgdl: 0 } as Store;\n}\nconst store: Store = g.__RAG_SPARSE_STORE as Store;\n\nfunction normalize(s: string) {\n  return s.toLowerCase().replace(/[^a-z0-9 ]/g, ' ').replace(/\\s+/g, ' ').trim();\n}\nfunction tokenize(text: string): string[] {\n  return normalize(text).split(' ').filter(Boolean);\n}\n\nexport function addSparseDocuments(items: StoredChunk[]) {\n  for (const it of items) {\n    const tokens = tokenize(it.text);\n    const tf = new Map<string, number>();\n    const seen = new Set<string>();\n    for (const t of tokens) {\n      tf.set(t, (tf.get(t) || 0) + 1);\n      if (!seen.has(t)) {\n        seen.add(t);\n        store.df.set(t, (store.df.get(t) || 0) + 1);\n      }\n    }\n    // write to inverted index\n    tf.forEach((freq, term) => {\n      let postings = store.inv.get(term);\n      if (!postings) { postings = new Map(); store.inv.set(term, postings); }\n      postings.set(it.id, freq);\n    });\n    // add doc\n    store.docs.set(it.id, { id: it.id, url: it.url, title: it.title, text: it.text, length: tokens.length });\n  }\n  // update corpus stats\n  store.N = store.docs.size;\n  let totalLen = 0;\n  store.docs.forEach(d => totalLen += d.length);\n  store.avgdl = store.N ? totalLen / store.N : 0;\n}\n\nexport function resetStore() {\n  store.docs.clear();\n  store.inv.clear();\n  store.df.clear();\n  store.N = 0;\n  store.avgdl = 0;\n}\n\nexport function size() {\n  return { count: store.docs.size, avgdl: store.avgdl };\n}\n\nexport function listDocs(limit = 50) {\n  const arr: { id: string; url: string; title?: string; length: number }[] = [];\n  store.docs.forEach((d) => arr.push({ id: d.id, url: d.url, title: d.title, length: d.length }));\n  return arr.slice(0, Math.max(0, limit));\n}\n\n// BM25 scoring\nexport function searchSparse(query: string, k = 5, k1 = 1.5, b = 0.75) {\n  const qTokens = tokenize(query);\n  const qTerms = Array.from(new Set(qTokens));\n  const scores = new Map<string, number>();\n  for (const term of qTerms) {\n    const df = store.df.get(term) || 0;\n    if (df === 0 || store.N === 0) continue;\n    const idf = Math.log(1 + (store.N - df + 0.5) / (df + 0.5));\n    const postings = store.inv.get(term)!;\n    postings?.forEach((tf, docId) => {\n      const d = store.docs.get(docId)!;\n      const denom = tf + k1 * (1 - b + b * (d.length / (store.avgdl || 1)));\n      const scoreAdd = idf * ((tf * (k1 + 1)) / (denom || 1));\n      scores.set(docId, (scores.get(docId) || 0) + scoreAdd);\n    });\n  }\n  const ranked = Array.from(scores.entries())\n    .sort((a, b2) => b2[1] - a[1])\n    .slice(0, k)\n    .map(([docId, s]) => {\n      const d = store.docs.get(docId)!;\n      return { id: d.id, url: d.url, title: d.title, text: d.text, score: s };\n    });\n  return ranked;\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/NChinnappan/SourceAI/UI/shell-app/src/app/api/rag/query/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { searchSparse } from '@/lib/rag/store';\n\nexport const runtime = 'nodejs';\n\nfunction normalize(s: string) {\n  return s.toLowerCase().replace(/[^a-z0-9 ]/g, ' ').replace(/\\s+/g, ' ').trim();\n}\nfunction tokenize(text: string): string[] {\n  return normalize(text).split(' ').filter(Boolean);\n}\nfunction splitSentences(text: string): string[] {\n  // simple sentence splitter on ., !, ?, or double newlines\n  return text\n    .split(/(?<=[.!?])\\s+|\\n{2,}/g)\n    .map(s => s.trim())\n    .filter(Boolean);\n}\n\n// very light stopwords to find informative overlap\nconst STOPWORDS = new Set([\n  'the','a','an','and','or','of','to','in','on','for','by','with','is','are','was','were','be','been','at','as','it','that','this','these','those',\n  'what','when','why','how','which','who','whom','about','tell','me','year'\n]);\n\nexport async function POST(req: NextRequest) {\n  try {\n    const body = await req.json().catch(() => ({}));\n    const query: string = body?.query || '';\n    const topK: number = Math.min(Math.max(parseInt(body?.topK || '5', 10) || 5, 1), 10);\n    const topSentences: number = Math.min(Math.max(parseInt(body?.topSentences || '4', 10) || 4, 1), 8);\n    if (!query) return NextResponse.json({ error: 'Provide { query: string }' }, { status: 400 });\n\n    // Expand candidate set, then re-rank to avoid Ashley Direct when not requested\n    const candidates = searchSparse(query, Math.max(topK * 3, topK));\n    const qLowerAll = query.toLowerCase();\n    const mentionsDirectInQuery = /(ashley\\s*direct|ashleydirect|ashley\\s*net|ashleynet|direct portal|adp\\b)/i.test(qLowerAll);\n    const rescored = candidates.map(h => {\n      let s = h.score || 0;\n      const meta = ((h.title || '') + ' ' + (h.url || '') + ' ' + h.text.slice(0, 200)).toLowerCase();\n      const hasDirectMeta = /(ashley\\s*direct|ashleydirect|ashley\\s*net|ashleynet)/i.test(meta);\n      const hasBrandMeta = /(about ashley|ashley furniture|ashley industries|company|history|founded|established)/i.test(meta);\n      if (!mentionsDirectInQuery && hasDirectMeta) s *= 0.2; // penalize Direct when user didn't ask\n      if (!mentionsDirectInQuery && hasBrandMeta) s *= 1.2;   // promote brand context\n      if (mentionsDirectInQuery && hasDirectMeta) s *= 1.15;  // slight boost when explicitly asking about Direct\n      return { ...h, score: s };\n    }).sort((a,b) => (b.score - a.score)).slice(0, topK);\n\n    const hits = rescored;\n\n    // Build concise extractive answer from top sentences across hits\n    const allTerms = tokenize(query);\n    const qImportantBase = Array.from(new Set(allTerms.filter(t => !STOPWORDS.has(t) && t !== 'ashley')));\n    // Synonym expansion for brand/system tokens (e.g., \"ashley direct\" -> \"ashleydirect\")\n    const qImportantSet = new Set(qImportantBase);\n    const hasAshley = allTerms.includes('ashley');\n    if (hasAshley && (allTerms.includes('direct') || /ashley\\s*direct/i.test(qLowerAll))) qImportantSet.add('ashleydirect');\n    if (hasAshley && /ashley\\s*net/i.test(qLowerAll)) qImportantSet.add('ashleynet');\n    const qImportant = Array.from(qImportantSet);\n\n    const isWhen = /(^|\\b)(when|what year)(\\b|$)/.test(qLowerAll);\n    const isMerger = /(\\bmerge(d)?\\b|\\bmerger\\b|\\bacquire(d|s|ment)?\\b|\\bacquisition\\b|\\bcombine(d|s)?\\b|\\bconsolidat(e|ed|ion)\\b|\\bjoin(ed)?\\b)/i.test(qLowerAll);\n    const isGeneric = qImportant.length === 0; // e.g., \"tell about ashley\"\n    type ScoredSentence = { s: string; score: number; from: number };\n    const scored: ScoredSentence[] = [];\n    hits.forEach((h, idx) => {\n      const sentences = splitSentences(h.text);\n      for (const s of sentences) {\n        const tokens = tokenize(s);\n        if (!tokens.length) continue;\n        // overlap score using informative query tokens only\n        let overlap = 0;\n        for (const t of qImportant) {\n          if (tokens.includes(t)) overlap += 1;\n        }\n        if (!isWhen && !isGeneric && overlap === 0) continue; // require at least one informative match for non-generic queries\n        // favor shorter, more focused sentences and earlier ones\n        const lenPenalty = Math.log(1 + tokens.length);\n        const score = (overlap / lenPenalty) + (1 / (1 + sentences.indexOf(s)));\n        scored.push({ s, score, from: idx });\n      }\n    });\n    // Intent-specific filtering: merger vs founding\n    if (isMerger) {\n      const kwMerger = /(merge|merged|merger|acquire|acquired|acquisition|combine|combined|consolidat|join)/i;\n      const mergerOnly = scored.filter(s => kwMerger.test(s.s));\n      if (mergerOnly.length) { scored.splice(0, scored.length, ...mergerOnly); }\n    }\n\n    // If the query asks \"when/what year\", prefer sentences with a year and intent-aligned keywords\n    if (isWhen) {\n      const yearRe = /\\b(18|19|20)\\d{2}\\b/;\n      const kwFounding = /(establish|founded|incorporat|since|started|begin|origin)/i;\n      const kwMerger = /(merge|merged|merger|acquire|acquired|acquisition|combine|combined|consolidat|join)/i;\n      const kw = isMerger ? kwMerger : kwFounding;\n      const filtered = scored.filter(s => yearRe.test(s.s) && kw.test(s.s));\n      if (filtered.length) { scored.splice(0, scored.length, ...filtered); }\n    }\n\n    scored.sort((a, b) => b.score - a.score);\n\n    // Deduplicate by Jaccard similarity on token sets\n    const pick: ScoredSentence[] = [];\n    const jaccard = (a: string[], b: string[]) => {\n      const A = new Set(a), B = new Set(b);\n      let inter = 0;\n      A.forEach(x => { if (B.has(x)) inter++; });\n      const uni = A.size + B.size - inter || 1;\n      return inter / uni;\n    };\n    for (const cand of scored) {\n      const ctok = tokenize(cand.s);\n      if (pick.some(p => jaccard(tokenize(p.s), ctok) > 0.6)) continue;\n      pick.push(cand);\n      if (pick.length >= topSentences) break;\n    }\n\n    let answer = pick.map(p => p.s).join(' ');\n    if ((!answer || answer.trim().length === 0) && hits.length) {\n      // Fallback: synthesize from leading sentences of top documents\n      const fallback: string[] = [];\n      for (const h of hits) {\n        const ss = splitSentences(h.text).slice(0, 2);\n        fallback.push(...ss);\n        if (fallback.length >= topSentences) break;\n      }\n      answer = fallback.slice(0, topSentences).join(' ');\n    }\n\n    return NextResponse.json({ ok: true, hits, answer });\n  } catch (e: unknown) {\n    const msg = e instanceof Error ? e.message : String(e);\n    return NextResponse.json({ error: msg }, { status: 500 });\n  }\n}\n\n"],"names":[],"mappings":"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","debugId":null}}]
}